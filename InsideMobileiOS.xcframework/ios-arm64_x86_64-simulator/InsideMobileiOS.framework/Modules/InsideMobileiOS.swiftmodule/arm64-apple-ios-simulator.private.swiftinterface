// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name InsideMobileiOS
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Foundation
import Swift
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public protocol InsideClientDelegate {
  @objc optional func onConnected()
  @objc optional func onChatAvailable(_ available: Swift.Bool)
  @objc optional func onChatMessage(messageText: Swift.String, proactiveChat: Swift.Bool, senderName: Swift.String, operatorImageUrl: Swift.String?)
  @objc optional func onAddToBasket(productId: Swift.String, skuId: Swift.String, completionBlock: @escaping ((Swift.Bool) -> Swift.Void))
  @objc optional func onViewProductDetails(productId: Swift.String, skuId: Swift.String?)
  @objc optional func onChatClose()
  @objc optional func onChatMinimise()
  @objc optional func onChatEnded(_ endedBy: Swift.String)
  @objc optional func onDisconnected()
  @objc optional func onError(message: Swift.String, statusCode: Swift.Int)
  @objc optional func onLinkTapped(url: Foundation.URL?) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency open class InsideClient : ObjectiveC.NSObject, WebKit.WKScriptMessageHandler {
  @objc @_Concurrency.MainActor @preconcurrency open var delegate: (any InsideMobileiOS.InsideClientDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency open var user: InsideMobileiOS.InsideUser?
  @objc @_Concurrency.MainActor @preconcurrency open var view: InsideMobileiOS.InsideView
  @objc @_Concurrency.MainActor @preconcurrency open var cart: InsideMobileiOS.InsideCart
  @objc @_Concurrency.MainActor @preconcurrency open var chatViewController: InsideMobileiOS.InsideViewController?
  @objc @_Concurrency.MainActor @preconcurrency open var unreadMessagesCount: Swift.Int
  @_Concurrency.MainActor @preconcurrency open var debug: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency open var loaderBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency open var loaderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency open var currentChatId: Swift.Int
  @objc @_Concurrency.MainActor @preconcurrency convenience public init(domainURL: Swift.String, accountKey: Swift.String, mobileSiteURL: Swift.String, appName: Swift.String = "", subsiteId: Swift.String = "")
  @_Concurrency.MainActor @preconcurrency @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @objc @_Concurrency.MainActor @preconcurrency open func setAPNSDeviceToken(_ token: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency open func disconnect()
  @objc @_Concurrency.MainActor @preconcurrency open func push()
  @objc @_Concurrency.MainActor @preconcurrency open func setUser(userId: Swift.String, name: Swift.String, data: Swift.Dictionary<Swift.String, Swift.AnyObject> = [:])
  @objc @_Concurrency.MainActor @preconcurrency open func unsetUser()
  @objc @_Concurrency.MainActor @preconcurrency open func setView(type: InsideMobileiOS.InsideViewType, name: Swift.String, category: Swift.String? = nil, image: Swift.String? = nil, url: Swift.String? = nil, price: Swift.Float = 0, sku: Swift.String? = nil, data: Swift.Dictionary<Swift.String, Swift.AnyObject> = [:], tags: [Swift.String] = [])
  @objc @_Concurrency.MainActor @preconcurrency open func setCart(cartId: Swift.String? = "auto", cartTotal: Swift.Float, data: Swift.Dictionary<Swift.String, Swift.AnyObject> = [:])
  @objc @_Concurrency.MainActor @preconcurrency open func abandonCart()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
}
extension InsideMobileiOS.InsideClient : WebKit.WKUIDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func webView(_ webView: WebKit.WKWebView, runJavaScriptAlertPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping () -> Swift.Void)
}
extension InsideMobileiOS.InsideClient : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationResponse: WebKit.WKNavigationResponse, decisionHandler: @escaping (WebKit.WKNavigationResponsePolicy) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func webViewWebContentProcessDidTerminate(_ webView: WebKit.WKWebView)
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency open class InsideViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency open var openChatPane: ((_ open: Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers open class InsideCart : ObjectiveC.NSObject {
  @objc open var data: [Swift.String : Swift.AnyObject]
  @objc open func addItem(sku: Swift.String, name: Swift.String, price: Swift.Float, qty: Swift.Int, category: Swift.String? = nil, img: Swift.String? = nil)
  @objc open func updateItem(sku: Swift.String, name: Swift.String, price: Swift.Float, qty: Swift.Int, category: Swift.String? = nil, img: Swift.String? = nil)
  @objc open func removeItem(sku: Swift.String)
  @objc open func clearItems()
  @objc open func updateCartTotal(cartTotal: Swift.Float)
  @objc open func completeOrder(completedOrderId: Swift.String, completedOrderTotal: Swift.Float)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class InsideUser : ObjectiveC.NSObject {
  @objc open var data: [Swift.String : Swift.AnyObject]
  @objc deinit
}
@objc public enum InsideViewType : Swift.Int {
  case product = 1, productCategory = 2, article = 3, search = 4, home = 5, checkout = 6, other = 7, notFound = 8, login = 9, orderConfirmed = 10, lead = 11, leadConfirmed = 12, data = 400, alert = 401
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc open class InsideView : ObjectiveC.NSObject {
  @objc open var category: Swift.String?
  @objc open var img: Swift.String?
  @objc open var url: Swift.String?
  @objc open var price: Swift.Float
  @objc open var sku: Swift.String?
  @objc open var data: [Swift.String : Swift.AnyObject]
  @objc open var tags: [Swift.String]
  @objc deinit
}
extension InsideMobileiOS.InsideClient : Swift.Sendable {}
extension InsideMobileiOS.InsideViewType : Swift.Equatable {}
extension InsideMobileiOS.InsideViewType : Swift.Hashable {}
extension InsideMobileiOS.InsideViewType : Swift.RawRepresentable {}
