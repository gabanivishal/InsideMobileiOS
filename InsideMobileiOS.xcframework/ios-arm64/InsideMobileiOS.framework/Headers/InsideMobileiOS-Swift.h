#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef INSIDEMOBILEIOS_SWIFT_H
#define INSIDEMOBILEIOS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="InsideMobileiOS",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

/// For apps that can process a User’s shopping cart or Order the InsideCart class is used to track the ID, total value and items.
SWIFT_CLASS("_TtC15InsideMobileiOS10InsideCart")
@interface InsideCart : NSObject
/// Attach any extra data to a page view as a JSON object. This can be any data and will show when you click on the entry in the visitor’s history. This data will also be usable with event and channel filters in the future.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull data;
/// Add an item with the below parameters to the cart
/// \param sku sku of product
///
/// \param name name of the product
///
/// \param price price of product
///
/// \param qty quantity of product
///
/// \param category(optional) category of product
///
/// \param img(optional) image url of product
///
- (void)addItemWithSku:(NSString * _Nonnull)sku name:(NSString * _Nonnull)name price:(float)price qty:(NSInteger)qty category:(NSString * _Nullable)category img:(NSString * _Nullable)img;
/// Update an item with the below parameters in the current cart. It will replace all the previous values. Don’t want to change the parameter value, pass previous value for the parameter.
/// \param sku sku of product
///
/// \param name name of the product
///
/// \param price price of product
///
/// \param qty quantity of product
///
/// \param category(optional) category of product
///
/// \param img(optional) image url of product
///
- (void)updateItemWithSku:(NSString * _Nonnull)sku name:(NSString * _Nonnull)name price:(float)price qty:(NSInteger)qty category:(NSString * _Nullable)category img:(NSString * _Nullable)img;
/// Remove an item with the below parameters from the cart
/// \param sku sku of product
///
- (void)removeItemWithSku:(NSString * _Nonnull)sku;
/// Clears all items from the cart
- (void)clearItems;
/// Update the cart total after any changes made in cart
/// \param cartTotal total value of current cart
///
- (void)updateCartTotalWithCartTotal:(float)cartTotal;
/// Mark the order as completed and confirm the final order ID and total.
/// \param completedOrderId completed order confirmation ID for the purchase
///
/// \param completedOrderTotal total of completed order
///
- (void)completeOrderWithCompletedOrderId:(NSString * _Nonnull)completedOrderId completedOrderTotal:(float)completedOrderTotal;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol InsideClientDelegate;
@class InsideUser;
@class InsideView;
@class InsideViewController;
@class UIColor;
@class WKUserContentController;
@class WKScriptMessage;
enum InsideViewType : NSInteger;

/// The InsideClient class is the functional component of the Inside Client API and handles all tracking and real-time communication and API calls between the client and server.
SWIFT_CLASS("_TtC15InsideMobileiOS12InsideClient")
@interface InsideClient : NSObject <WKScriptMessageHandler>
/// Set the InsideClientDelegate to receive chat events via the callback methods.
@property (nonatomic, strong) id <InsideClientDelegate> _Nullable delegate;
/// This is the User of the app. The InsideUser instance is used to use pass User data like name, userId and data.
@property (nonatomic, strong) InsideUser * _Nullable user;
/// The InsideView instance is used to set all the required properties when tracking any view/product.
@property (nonatomic, strong) InsideView * _Nonnull view;
/// The User’s cart or basket is defined as an InsideCart instance.
/// addItem, updateItem, removeItem and clearItems can be used to track the User’s cart.
@property (nonatomic, strong) InsideCart * _Nonnull cart;
/// chatViewController containts webview and it should be used to show chat view with present or push method.
@property (nonatomic, strong) InsideViewController * _Nullable chatViewController;
/// Get count of unread messages. Unread count can be shown as badge on chat icon.
@property (nonatomic) NSInteger unreadMessagesCount;
/// Set background color for loading screen
@property (nonatomic, strong) UIColor * _Nonnull loaderBackgroundColor;
/// Set color for loader/activity indicator of loading screen
@property (nonatomic, strong) UIColor * _Nonnull loaderColor;
/// Chat Id of current active chat session
@property (nonatomic) NSInteger currentChatId;
/// Initiate client with domainURL, accountKey, webView and mobileSiteURL.
/// \param domainURL The domain URL with https protocol
///
/// \param accountKey The Inside Account Key
///
/// \param mobileSiteURL URL of mobile website
///
/// \param appName(optional) The App name to display on the Inside dashboard
///
/// \param subsiteId(optional) The subsite Id of subsite to filter visitors on the Inside dashboard
///
- (nonnull instancetype)initWithDomainURL:(NSString * _Nonnull)domainURL accountKey:(NSString * _Nonnull)accountKey mobileSiteURL:(NSString * _Nonnull)mobileSiteURL appName:(NSString * _Nonnull)appName subsiteId:(NSString * _Nonnull)subsiteId;
- (void)userContentController:(WKUserContentController * _Nonnull)userContentController didReceiveScriptMessage:(WKScriptMessage * _Nonnull)message;
/// Set user’s APNS Device Token to receive push notifications
/// \param token The device token in order for the User to receive Push Notifications
///
- (void)setAPNSDeviceToken:(NSString * _Nonnull)token;
/// Disconnect from chat
- (void)disconnect;
/// Push the current context for tracking. This function must be called once the data is set for tracking a view, product or cart.
- (void)push;
/// setUser for visitor tracking
/// \param userId The Id of the app User
///
/// \param name The name of the User
///
/// \param data(optional) Using a data dictionary, pass extra information like the User’s email, phone no etc.
///
- (void)setUserWithUserId:(NSString * _Nonnull)userId name:(NSString * _Nonnull)name data:(NSDictionary<NSString *, id> * _Nonnull)data;
/// unsetUser and it stops user from being tracked with userId, name and data if any provided.
- (void)unsetUser;
/// setView for tracking
/// \param type The type of the view. See InsideViewType.
///
/// \param name The unique name of the view.
///
/// \param category(optional) The category of the view. This is used mainly while tracking a product category page or product view.
///
/// \param image(optional) The image url of the view (i.e. product thumbnail url)
///
/// \param url(optional) The App schema based url of the view
///
/// \param price(optional) The price of view (i.e. for a product view)
///
/// \param sku(optional) The SKU of the view (i.e. for a product view)
///
/// \param data(optional) Use to pass extra information in a dictionary
/// regarding the view.
///
/// \param tags(optional) Custom tags can be used with event and channel filters to better target special cases and add extra context to a page view. Each tag string should not be more than 255 characters.
///
- (void)setViewWithType:(enum InsideViewType)type name:(NSString * _Nonnull)name category:(NSString * _Nullable)category image:(NSString * _Nullable)image url:(NSString * _Nullable)url price:(float)price sku:(NSString * _Nullable)sku data:(NSDictionary<NSString *, id> * _Nonnull)data tags:(NSArray<NSString *> * _Nonnull)tags;
/// Use setCart for tracking the User’s Cart.
/// \param cartId(optional) Set the cartId of the User’s Cart. If not passed the Inside will generate the cartId automatically.
///
/// \param cartTotal Total value of cart.
///
/// \param data(optional) Used to pass extra information in a dictionary like shipping costs, discounts etc.
///
- (void)setCartWithCartId:(NSString * _Nullable)cartId cartTotal:(float)cartTotal data:(NSDictionary<NSString *, id> * _Nonnull)data;
/// Abandon the User’s Cart.
- (void)abandonCart;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class WKWebView;
@class WKWebViewConfiguration;
@class WKNavigationAction;
@class WKWindowFeatures;
@class WKFrameInfo;

@interface InsideClient (SWIFT_EXTENSION(InsideMobileiOS)) <WKUIDelegate>
- (WKWebView * _Nullable)webView:(WKWebView * _Nonnull)webView createWebViewWithConfiguration:(WKWebViewConfiguration * _Nonnull)configuration forNavigationAction:(WKNavigationAction * _Nonnull)navigationAction windowFeatures:(WKWindowFeatures * _Nonnull)windowFeatures SWIFT_WARN_UNUSED_RESULT;
- (void)webView:(WKWebView * _Nonnull)webView runJavaScriptAlertPanelWithMessage:(NSString * _Nonnull)message initiatedByFrame:(WKFrameInfo * _Nonnull)frame completionHandler:(void (^ _Nonnull)(void))completionHandler;
@end

@class WKNavigationResponse;
@class WKNavigation;

@interface InsideClient (SWIFT_EXTENSION(InsideMobileiOS)) <WKNavigationDelegate>
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationResponse:(WKNavigationResponse * _Nonnull)navigationResponse decisionHandler:(void (^ _Nonnull)(WKNavigationResponsePolicy))decisionHandler;
- (void)webView:(WKWebView * _Nonnull)webView didFailProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (void)webViewWebContentProcessDidTerminate:(WKWebView * _Nonnull)webView;
@end

@class NSURL;

/// The InsideClientDelegate protocol defines the callback methods that the Inside servers will trigger events through. Implementing this protocol on your class gives you access to the given event callback methods.
SWIFT_PROTOCOL("_TtP15InsideMobileiOS20InsideClientDelegate_")
@protocol InsideClientDelegate
@optional
/// Triggered when the Inside establishes a connection, chat and other real-time functionality is available once connected.
- (void)onConnected;
/// Triggered when the chat availability is toggled,
/// \param available true means chat is available, false means chat is unavailable.
///
- (void)onChatAvailable:(BOOL)available;
/// This method is called when chat pane is closed and a message is received.
/// \param messageText text of chat message
///
/// \param proactiveChat true means chat is proactive chat started by operator, false means chat is not proactive chat.
///
/// \param senderName Name of the message sender/Operator
///
/// \param operatorImageUrl operator’s image/default operator image url or custom image url as per the theme or null if not specified in theme.
///
- (void)onChatMessageWithMessageText:(NSString * _Nonnull)messageText proactiveChat:(BOOL)proactiveChat senderName:(NSString * _Nonnull)senderName operatorImageUrl:(NSString * _Nullable)operatorImageUrl;
/// This method is called when user taps on add to basket button of product card
/// \param productId productId of the product
///
/// \param skuId skuId of the product
///
/// \param completionBlock call the block with true or false parameter when product added successfully or failed respectively
///
- (void)onAddToBasketWithProductId:(NSString * _Nonnull)productId skuId:(NSString * _Nonnull)skuId completionBlock:(void (^ _Nonnull)(BOOL))completionBlock;
/// This method is called when user taps on view details button of product card
/// \param productId productId of the product
///
/// \param skuId skuId of the product
///
- (void)onViewProductDetailsWithProductId:(NSString * _Nonnull)productId skuId:(NSString * _Nullable)skuId;
/// Triggered when the closed button tapped in chat view.
- (void)onChatClose;
/// Triggered when minimise button tapped in chat view.
- (void)onChatMinimise;
/// Triggered when chat is ended by visitor or operator/system.
/// \param endedBy Value is “visitor” when chat is ended by user, “operator” when chat is ended by operator or system.
///
- (void)onChatEnded:(NSString * _Nonnull)endedBy;
/// Triggered when the client’s real-time connection has disconnected.
- (void)onDisconnected;
/// Triggered when any error occurs.
- (void)onErrorWithMessage:(NSString * _Nonnull)message statusCode:(NSInteger)statusCode;
/// Triggered when tapped on any link within chat pane. Return true when link is handled on app side otherwise return false.
- (BOOL)onLinkTappedWithUrl:(NSURL * _Nullable)url SWIFT_WARN_UNUSED_RESULT;
@end


/// The InsideUser class defines the User’s identifying information that is passed through to Inside. If the User data is configured Inside considers the User to be logged in and displays the avatar as green.
SWIFT_CLASS("_TtC15InsideMobileiOS10InsideUser")
@interface InsideUser : NSObject
/// Attach any extra data to the view as a JSON object. This can be any data and will show when you click on   the entry in the User’s history on the Inside dashboard. This data will also be usable with Inside event and channel filters.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull data;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The InsideView class defines the User’s current viewing context, including the type of page or activity being viewed, a unique name for the activity and various other information depending on what is being viewed (eg. Category name, price, SKU, etc).
/// The User’s View determines where their corresponding avatar stands and what information is available for the chat agents on the Inside Dashboard.
SWIFT_CLASS("_TtC15InsideMobileiOS10InsideView")
@interface InsideView : NSObject
/// Assigns a category to a view. This could be, for example, a product category name, a parent page name or the breadcrumb trail for the current page. Category hierarchy is delimited by “ / “ (space + forward slash + space).
@property (nonatomic, copy) NSString * _Nullable category;
/// Image URL of the view.
@property (nonatomic, copy) NSString * _Nullable img;
/// The Mobile App schema based URL
@property (nonatomic, copy) NSString * _Nullable url;
/// The price of the view. Used for tracking products.
@property (nonatomic) float price;
/// The SKU of the view. This relates primarily to a product SKU.
@property (nonatomic, copy) NSString * _Nullable sku;
/// Attach any extra data to the view as a JSON object. This can be any data and will show when you click on the entry in the User’s history. This data will also be usable with Inside event and channel filters.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull data;
/// Custom tags can be used with event and channel filters to better target special cases and add extra context to a page view. Each tag string should not be more than 255 characters.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull tags;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC15InsideMobileiOS20InsideViewController")
@interface InsideViewController : UIViewController
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// InsideViewType is to specify the type of the current page of visitor.
typedef SWIFT_ENUM(NSInteger, InsideViewType, open) {
///
  InsideViewTypeProduct = 1,
///
  InsideViewTypeProductCategory = 2,
///
  InsideViewTypeArticle = 3,
///
  InsideViewTypeSearch = 4,
///
  InsideViewTypeHome = 5,
///
  InsideViewTypeCheckout = 6,
///
  InsideViewTypeOther = 7,
///
  InsideViewTypeNotFound = 8,
///
  InsideViewTypeLogin = 9,
///
  InsideViewTypeOrderConfirmed = 10,
///
  InsideViewTypeLead = 11,
///
  InsideViewTypeLeadConfirmed = 12,
///
  InsideViewTypeData = 400,
///
  InsideViewTypeAlert = 401,
};


#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
